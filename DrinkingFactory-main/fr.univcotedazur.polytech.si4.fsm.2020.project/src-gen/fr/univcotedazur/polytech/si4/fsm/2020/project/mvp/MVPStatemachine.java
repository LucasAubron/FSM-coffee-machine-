/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.2020.project.mvp;

import fr.univcotedazur.polytech.si4.fsm.2020.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class MVPStatemachine implements IMVPStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean coffeeButton;
		
		
		public void raiseCoffeeButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coffeeButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean teaButton;
		
		
		public void raiseTeaButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							teaButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean expressoButton;
		
		
		public void raiseExpressoButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							expressoButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancelButton;
		
		
		public void raiseCancelButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancelButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean insertCoin10;
		
		
		public void raiseInsertCoin10() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							insertCoin10 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean insertCoin25;
		
		
		public void raiseInsertCoin25() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							insertCoin25 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean insertCoin50;
		
		
		public void raiseInsertCoin50() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							insertCoin50 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nFC;
		
		
		public void raiseNFC() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nFC = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean enoughMoneyInserted;
		
		
		public void raiseEnoughMoneyInserted() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							enoughMoneyInserted = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean gobeletRecupere;
		
		
		public void raiseGobeletRecupere() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							gobeletRecupere = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean positionnerDosette;
		
		
		public void raisePositionnerDosette() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							positionnerDosette = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancel;
		
		
		public boolean isRaisedCancel() {
			synchronized(MVPStatemachine.this) {
				return cancel;
			}
		}
		
		protected void raiseCancel() {
			synchronized(MVPStatemachine.this) {
				cancel = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelRaised();
				}
			}
		}
		
		private boolean notHotEnough;
		
		
		public boolean isRaisedNotHotEnough() {
			synchronized(MVPStatemachine.this) {
				return notHotEnough;
			}
		}
		
		protected void raiseNotHotEnough() {
			synchronized(MVPStatemachine.this) {
				notHotEnough = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNotHotEnoughRaised();
				}
			}
		}
		
		private boolean hotEnoughOut;
		
		
		public boolean isRaisedHotEnoughOut() {
			synchronized(MVPStatemachine.this) {
				return hotEnoughOut;
			}
		}
		
		protected void raiseHotEnoughOut() {
			synchronized(MVPStatemachine.this) {
				hotEnoughOut = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onHotEnoughOutRaised();
				}
			}
		}
		
		private boolean giveBackMoney;
		
		
		public boolean isRaisedGiveBackMoney() {
			synchronized(MVPStatemachine.this) {
				return giveBackMoney;
			}
		}
		
		protected void raiseGiveBackMoney() {
			synchronized(MVPStatemachine.this) {
				giveBackMoney = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGiveBackMoneyRaised();
				}
			}
		}
		
		private boolean gobeletIsReady;
		
		
		public boolean isRaisedGobeletIsReady() {
			synchronized(MVPStatemachine.this) {
				return gobeletIsReady;
			}
		}
		
		protected void raiseGobeletIsReady() {
			synchronized(MVPStatemachine.this) {
				gobeletIsReady = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGobeletIsReadyRaised();
				}
			}
		}
		
		private boolean gobeletIsTaken;
		
		
		public boolean isRaisedGobeletIsTaken() {
			synchronized(MVPStatemachine.this) {
				return gobeletIsTaken;
			}
		}
		
		protected void raiseGobeletIsTaken() {
			synchronized(MVPStatemachine.this) {
				gobeletIsTaken = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGobeletIsTakenRaised();
				}
			}
		}
		
		private boolean doTransaction;
		
		
		public boolean isRaisedDoTransaction() {
			synchronized(MVPStatemachine.this) {
				return doTransaction;
			}
		}
		
		protected void raiseDoTransaction() {
			synchronized(MVPStatemachine.this) {
				doTransaction = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoTransactionRaised();
				}
			}
		}
		
		private boolean selected;
		
		public synchronized boolean getSelected() {
			synchronized(MVPStatemachine.this) {
				return selected;
			}
		}
		
		public void setSelected(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.selected = value;
			}
		}
		
		private boolean payedEnough;
		
		public synchronized boolean getPayedEnough() {
			synchronized(MVPStatemachine.this) {
				return payedEnough;
			}
		}
		
		public void setPayedEnough(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.payedEnough = value;
			}
		}
		
		private boolean hotEnough;
		
		public synchronized boolean getHotEnough() {
			synchronized(MVPStatemachine.this) {
				return hotEnough;
			}
		}
		
		public void setHotEnough(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.hotEnough = value;
			}
		}
		
		private boolean gobeletOk;
		
		public synchronized boolean getGobeletOk() {
			synchronized(MVPStatemachine.this) {
				return gobeletOk;
			}
		}
		
		public void setGobeletOk(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.gobeletOk = value;
			}
		}
		
		private boolean gobeletTaken;
		
		public synchronized boolean getGobeletTaken() {
			synchronized(MVPStatemachine.this) {
				return gobeletTaken;
			}
		}
		
		public void setGobeletTaken(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.gobeletTaken = value;
			}
		}
		
		protected void clearEvents() {
			coffeeButton = false;
			teaButton = false;
			expressoButton = false;
			cancelButton = false;
			insertCoin10 = false;
			insertCoin25 = false;
			insertCoin50 = false;
			nFC = false;
			enoughMoneyInserted = false;
			gobeletRecupere = false;
			positionnerDosette = false;
		}
		protected void clearOutEvents() {
		
		cancel = false;
		notHotEnough = false;
		hotEnoughOut = false;
		giveBackMoney = false;
		gobeletIsReady = false;
		gobeletIsTaken = false;
		doTransaction = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Choice_and_Payment,
		main_region_Choice_and_Payment_Choice_region_Chosed_or_not,
		main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed,
		main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice,
		main_region_Choice_and_Payment_Payment_region_Payed_or_not,
		main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money,
		main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted,
		main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money,
		main_region_Fin_de_la_commande,
		main_region_Fin_de_la_commande_nettoyage_Nettoyage,
		main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie,
		main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret,
		main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_,
		main_region_Preparation_de_la_boisson,
		main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette,
		main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet,
		main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre,
		main_region_Preparation_de_la_boisson_eau_Chauffage,
		main_region_Preparation_de_la_boisson_eau_AssezChauff_,
		main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau,
		main_region_End,
		$NullState$
	};
	
	private State[] historyVector = new State[2];
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[6];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public MVPStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 2; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSelected(false);
		
		sCInterface.setPayedEnough(false);
		
		sCInterface.setHotEnough(false);
		
		sCInterface.setGobeletOk(false);
		
		sCInterface.setGobeletTaken(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
				case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed:
					main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed_react(true);
					break;
				case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice:
					main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice_react(true);
					break;
				case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money:
					main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money_react(true);
					break;
				case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted:
					main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted_react(true);
					break;
				case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money:
					main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money_react(true);
					break;
				case main_region_Fin_de_la_commande_nettoyage_Nettoyage:
					main_region_Fin_de_la_commande_nettoyage_Nettoyage_react(true);
					break;
				case main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie:
					main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie_react(true);
					break;
				case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret:
					main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret_react(true);
					break;
				case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_:
					main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r__react(true);
					break;
				case main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette:
					main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette_react(true);
					break;
				case main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet:
					main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet_react(true);
					break;
				case main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre:
					main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre_react(true);
					break;
				case main_region_Preparation_de_la_boisson_eau_Chauffage:
					main_region_Preparation_de_la_boisson_eau_Chauffage_react(true);
					break;
				case main_region_Preparation_de_la_boisson_eau_AssezChauff_:
					main_region_Preparation_de_la_boisson_eau_AssezChauff__react(true);
					break;
				case main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau:
					main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau_react(true);
					break;
				case main_region_End:
					main_region_End_react(true);
					break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Choice_and_Payment:
			return stateVector[0].ordinal() >= State.
					main_region_Choice_and_Payment.ordinal()&& stateVector[0].ordinal() <= State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money.ordinal();
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not:
			return stateVector[0].ordinal() >= State.
					main_region_Choice_and_Payment_Choice_region_Chosed_or_not.ordinal()&& stateVector[0].ordinal() <= State.main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice.ordinal();
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed:
			return stateVector[0] == State.main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed;
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice:
			return stateVector[0] == State.main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not:
			return stateVector[1].ordinal() >= State.
					main_region_Choice_and_Payment_Payment_region_Payed_or_not.ordinal()&& stateVector[1].ordinal() <= State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money.ordinal();
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money:
			return stateVector[1] == State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted:
			return stateVector[1] == State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money:
			return stateVector[1] == State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money;
		case main_region_Fin_de_la_commande:
			return stateVector[0].ordinal() >= State.
					main_region_Fin_de_la_commande.ordinal()&& stateVector[0].ordinal() <= State.main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_.ordinal();
		case main_region_Fin_de_la_commande_nettoyage_Nettoyage:
			return stateVector[0] == State.main_region_Fin_de_la_commande_nettoyage_Nettoyage;
		case main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie:
			return stateVector[1] == State.main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie;
		case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret:
			return stateVector[2] == State.main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret;
		case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_:
			return stateVector[2] == State.main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_;
		case main_region_Preparation_de_la_boisson:
			return stateVector[0].ordinal() >= State.
					main_region_Preparation_de_la_boisson.ordinal()&& stateVector[0].ordinal() <= State.main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau.ordinal();
		case main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette:
			return stateVector[0] == State.main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette;
		case main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet:
			return stateVector[0] == State.main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet;
		case main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre:
			return stateVector[0] == State.main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre;
		case main_region_Preparation_de_la_boisson_eau_Chauffage:
			return stateVector[1] == State.main_region_Preparation_de_la_boisson_eau_Chauffage;
		case main_region_Preparation_de_la_boisson_eau_AssezChauff_:
			return stateVector[1] == State.main_region_Preparation_de_la_boisson_eau_AssezChauff_;
		case main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau:
			return stateVector[1] == State.main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau;
		case main_region_End:
			return stateVector[0] == State.main_region_End;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseCoffeeButton() {
		sCInterface.raiseCoffeeButton();
	}
	
	public synchronized void raiseTeaButton() {
		sCInterface.raiseTeaButton();
	}
	
	public synchronized void raiseExpressoButton() {
		sCInterface.raiseExpressoButton();
	}
	
	public synchronized void raiseCancelButton() {
		sCInterface.raiseCancelButton();
	}
	
	public synchronized void raiseInsertCoin10() {
		sCInterface.raiseInsertCoin10();
	}
	
	public synchronized void raiseInsertCoin25() {
		sCInterface.raiseInsertCoin25();
	}
	
	public synchronized void raiseInsertCoin50() {
		sCInterface.raiseInsertCoin50();
	}
	
	public synchronized void raiseNFC() {
		sCInterface.raiseNFC();
	}
	
	public synchronized void raiseEnoughMoneyInserted() {
		sCInterface.raiseEnoughMoneyInserted();
	}
	
	public synchronized void raiseGobeletRecupere() {
		sCInterface.raiseGobeletRecupere();
	}
	
	public synchronized void raisePositionnerDosette() {
		sCInterface.raisePositionnerDosette();
	}
	
	public synchronized boolean isRaisedCancel() {
		return sCInterface.isRaisedCancel();
	}
	
	public synchronized boolean isRaisedNotHotEnough() {
		return sCInterface.isRaisedNotHotEnough();
	}
	
	public synchronized boolean isRaisedHotEnoughOut() {
		return sCInterface.isRaisedHotEnoughOut();
	}
	
	public synchronized boolean isRaisedGiveBackMoney() {
		return sCInterface.isRaisedGiveBackMoney();
	}
	
	public synchronized boolean isRaisedGobeletIsReady() {
		return sCInterface.isRaisedGobeletIsReady();
	}
	
	public synchronized boolean isRaisedGobeletIsTaken() {
		return sCInterface.isRaisedGobeletIsTaken();
	}
	
	public synchronized boolean isRaisedDoTransaction() {
		return sCInterface.isRaisedDoTransaction();
	}
	
	public synchronized boolean getSelected() {
		return sCInterface.getSelected();
	}
	
	public synchronized void setSelected(boolean value) {
		sCInterface.setSelected(value);
	}
	
	public synchronized boolean getPayedEnough() {
		return sCInterface.getPayedEnough();
	}
	
	public synchronized void setPayedEnough(boolean value) {
		sCInterface.setPayedEnough(value);
	}
	
	public synchronized boolean getHotEnough() {
		return sCInterface.getHotEnough();
	}
	
	public synchronized void setHotEnough(boolean value) {
		sCInterface.setHotEnough(value);
	}
	
	public synchronized boolean getGobeletOk() {
		return sCInterface.getGobeletOk();
	}
	
	public synchronized void setGobeletOk(boolean value) {
		sCInterface.setGobeletOk(value);
	}
	
	public synchronized boolean getGobeletTaken() {
		return sCInterface.getGobeletTaken();
	}
	
	public synchronized void setGobeletTaken(boolean value) {
		sCInterface.setGobeletTaken(value);
	}
	
	/* Entry action for state 'Choice and Payment'. */
	private void entryAction_main_region_Choice_and_Payment() {
		timer.setTimer(this, 0, 200, true);
	}
	
	/* Entry action for state 'Chosed or not'. */
	private void entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not() {
		timer.setTimer(this, 1, 5000, false);
	}
	
	/* Entry action for state 'Drink chosed'. */
	private void entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed() {
		sCInterface.setSelected(true);
	}
	
	/* Entry action for state 'No choice'. */
	private void entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice() {
		sCInterface.setSelected(false);
	}
	
	/* Entry action for state 'Payed or not'. */
	private void entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not() {
		timer.setTimer(this, 2, 5000, false);
	}
	
	/* Entry action for state 'No money'. */
	private void entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money() {
		sCInterface.setPayedEnough(false);
	}
	
	/* Entry action for state 'Enough money'. */
	private void entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money() {
		sCInterface.setPayedEnough(true);
	}
	
	/* Entry action for state 'Gobelet pret'. */
	private void entryAction_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret() {
		sCInterface.raiseGobeletIsReady();
	}
	
	/* Entry action for state 'Gobelet récupéré'. */
	private void entryAction_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_() {
		sCInterface.raiseGobeletIsTaken();
	}
	
	/* Entry action for state 'Preparation de la boisson'. */
	private void entryAction_main_region_Preparation_de_la_boisson() {
		timer.setTimer(this, 3, 50000, false);
	}
	
	/* Entry action for state 'Chauffage'. */
	private void entryAction_main_region_Preparation_de_la_boisson_eau_Chauffage() {
		timer.setTimer(this, 4, 200, true);
		
		sCInterface.raiseNotHotEnough();
	}
	
	/* Entry action for state 'AssezChauffé'. */
	private void entryAction_main_region_Preparation_de_la_boisson_eau_AssezChauff_() {
		timer.setTimer(this, 5, 200, true);
		
		sCInterface.raiseHotEnoughOut();
	}
	
	/* Exit action for state 'Choice and Payment'. */
	private void exitAction_main_region_Choice_and_Payment() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Chosed or not'. */
	private void exitAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Payed or not'. */
	private void exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Preparation de la boisson'. */
	private void exitAction_main_region_Preparation_de_la_boisson() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Chauffage'. */
	private void exitAction_main_region_Preparation_de_la_boisson_eau_Chauffage() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'AssezChauffé'. */
	private void exitAction_main_region_Preparation_de_la_boisson_eau_AssezChauff_() {
		timer.unsetTimer(this, 5);
	}
	
	/* 'default' enter sequence for state Choice and Payment */
	private void enterSequence_main_region_Choice_and_Payment_default() {
		entryAction_main_region_Choice_and_Payment();
		enterSequence_main_region_Choice_and_Payment_Choice_region_default();
		enterSequence_main_region_Choice_and_Payment_Payment_region_default();
	}
	
	/* 'default' enter sequence for state Chosed or not */
	private void enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_default() {
		entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
		enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_default();
	}
	
	/* 'default' enter sequence for state Drink chosed */
	private void enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed_default() {
		entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state No choice */
	private void enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice_default() {
		entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Payed or not */
	private void enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_default() {
		entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
		enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_default();
	}
	
	/* 'default' enter sequence for state No money */
	private void enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money_default() {
		entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money;
		
		historyVector[1] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Money inserted */
	private void enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted;
		
		historyVector[1] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Enough money */
	private void enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money_default() {
		entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money;
		
		historyVector[1] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Fin de la commande */
	private void enterSequence_main_region_Fin_de_la_commande_default() {
		enterSequence_main_region_Fin_de_la_commande_nettoyage_default();
		enterSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_default();
		enterSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_default();
	}
	
	/* 'default' enter sequence for state Nettoyage */
	private void enterSequence_main_region_Fin_de_la_commande_nettoyage_Nettoyage_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Fin_de_la_commande_nettoyage_Nettoyage;
	}
	
	/* 'default' enter sequence for state Rendre monnaie */
	private void enterSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie;
	}
	
	/* 'default' enter sequence for state Gobelet pret */
	private void enterSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret_default() {
		entryAction_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret;
	}
	
	/* 'default' enter sequence for state Gobelet récupéré */
	private void enterSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r__default() {
		entryAction_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_;
	}
	
	/* 'default' enter sequence for state Preparation de la boisson */
	private void enterSequence_main_region_Preparation_de_la_boisson_default() {
		entryAction_main_region_Preparation_de_la_boisson();
		enterSequence_main_region_Preparation_de_la_boisson_gobelet_default();
		enterSequence_main_region_Preparation_de_la_boisson_eau_default();
	}
	
	/* 'default' enter sequence for state Positionnement dosette */
	private void enterSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette;
	}
	
	/* 'default' enter sequence for state Positionnement gobelet */
	private void enterSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet;
	}
	
	/* 'default' enter sequence for state Ajout du sucre */
	private void enterSequence_main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre;
	}
	
	/* 'default' enter sequence for state Chauffage */
	private void enterSequence_main_region_Preparation_de_la_boisson_eau_Chauffage_default() {
		entryAction_main_region_Preparation_de_la_boisson_eau_Chauffage();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Preparation_de_la_boisson_eau_Chauffage;
	}
	
	/* 'default' enter sequence for state AssezChauffé */
	private void enterSequence_main_region_Preparation_de_la_boisson_eau_AssezChauff__default() {
		entryAction_main_region_Preparation_de_la_boisson_eau_AssezChauff_();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Preparation_de_la_boisson_eau_AssezChauff_;
	}
	
	/* 'default' enter sequence for state Versement de l'eau */
	private void enterSequence_main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau;
	}
	
	/* 'default' enter sequence for state End */
	private void enterSequence_main_region_End_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_End;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Choice region */
	private void enterSequence_main_region_Choice_and_Payment_Choice_region_default() {
		react_main_region_Choice_and_Payment_Choice_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_default() {
		react_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1() {
		switch (historyVector[0]) {
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed:
			enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed_default();
			break;
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice:
			enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region Payment region */
	private void enterSequence_main_region_Choice_and_Payment_Payment_region_default() {
		react_main_region_Choice_and_Payment_Payment_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_default() {
		react_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1() {
		switch (historyVector[1]) {
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money:
			enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money_default();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted:
			enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted_default();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money:
			enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region nettoyage */
	private void enterSequence_main_region_Fin_de_la_commande_nettoyage_default() {
		react_main_region_Fin_de_la_commande_nettoyage__entry_Default();
	}
	
	/* 'default' enter sequence for region fin de la commande/rendu monnaie */
	private void enterSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_default() {
		react_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie__entry_Default();
	}
	
	/* 'default' enter sequence for region Récupérer gobelet */
	private void enterSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_default() {
		react_main_region_Fin_de_la_commande_R_cup_rer_gobelet__entry_Default();
	}
	
	/* 'default' enter sequence for region gobelet */
	private void enterSequence_main_region_Preparation_de_la_boisson_gobelet_default() {
		react_main_region_Preparation_de_la_boisson_gobelet__entry_Default();
	}
	
	/* 'default' enter sequence for region eau */
	private void enterSequence_main_region_Preparation_de_la_boisson_eau_default() {
		react_main_region_Preparation_de_la_boisson_eau__entry_Default();
	}
	
	/* Default exit sequence for state Choice and Payment */
	private void exitSequence_main_region_Choice_and_Payment() {
		exitSequence_main_region_Choice_and_Payment_Choice_region();
		exitSequence_main_region_Choice_and_Payment_Payment_region();
		exitAction_main_region_Choice_and_Payment();
	}
	
	/* Default exit sequence for state Chosed or not */
	private void exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not() {
		exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1();
		exitAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
	}
	
	/* Default exit sequence for state Drink chosed */
	private void exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state No choice */
	private void exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Payed or not */
	private void exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not() {
		exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1();
		exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
	}
	
	/* Default exit sequence for state No money */
	private void exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Money inserted */
	private void exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Enough money */
	private void exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Fin de la commande */
	private void exitSequence_main_region_Fin_de_la_commande() {
		exitSequence_main_region_Fin_de_la_commande_nettoyage();
		exitSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie();
		exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet();
	}
	
	/* Default exit sequence for state Nettoyage */
	private void exitSequence_main_region_Fin_de_la_commande_nettoyage_Nettoyage() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Rendre monnaie */
	private void exitSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Gobelet pret */
	private void exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Gobelet récupéré */
	private void exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Preparation de la boisson */
	private void exitSequence_main_region_Preparation_de_la_boisson() {
		exitSequence_main_region_Preparation_de_la_boisson_gobelet();
		exitSequence_main_region_Preparation_de_la_boisson_eau();
		exitAction_main_region_Preparation_de_la_boisson();
	}
	
	/* Default exit sequence for state Positionnement dosette */
	private void exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Positionnement gobelet */
	private void exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Ajout du sucre */
	private void exitSequence_main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Chauffage */
	private void exitSequence_main_region_Preparation_de_la_boisson_eau_Chauffage() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Preparation_de_la_boisson_eau_Chauffage();
	}
	
	/* Default exit sequence for state AssezChauffé */
	private void exitSequence_main_region_Preparation_de_la_boisson_eau_AssezChauff_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Preparation_de_la_boisson_eau_AssezChauff_();
	}
	
	/* Default exit sequence for state Versement de l'eau */
	private void exitSequence_main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state End */
	private void exitSequence_main_region_End() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed:
			exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed();
			exitAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
			break;
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice:
			exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice();
			exitAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
			break;
		case main_region_Fin_de_la_commande_nettoyage_Nettoyage:
			exitSequence_main_region_Fin_de_la_commande_nettoyage_Nettoyage();
			break;
		case main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette:
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette();
			break;
		case main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet:
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet();
			break;
		case main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre:
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre();
			break;
		case main_region_End:
			exitSequence_main_region_End();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money();
			exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
			exitAction_main_region_Choice_and_Payment();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted();
			exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
			exitAction_main_region_Choice_and_Payment();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money();
			exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
			exitAction_main_region_Choice_and_Payment();
			break;
		case main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie:
			exitSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie();
			break;
		case main_region_Preparation_de_la_boisson_eau_Chauffage:
			exitSequence_main_region_Preparation_de_la_boisson_eau_Chauffage();
			exitAction_main_region_Preparation_de_la_boisson();
			break;
		case main_region_Preparation_de_la_boisson_eau_AssezChauff_:
			exitSequence_main_region_Preparation_de_la_boisson_eau_AssezChauff_();
			exitAction_main_region_Preparation_de_la_boisson();
			break;
		case main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau:
			exitSequence_main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau();
			exitAction_main_region_Preparation_de_la_boisson();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret:
			exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret();
			break;
		case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_:
			exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Choice region */
	private void exitSequence_main_region_Choice_and_Payment_Choice_region() {
		switch (stateVector[0]) {
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed:
			exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed();
			exitAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
			break;
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice:
			exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice();
			exitAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1() {
		switch (stateVector[0]) {
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed:
			exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed();
			break;
		case main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice:
			exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment region */
	private void exitSequence_main_region_Choice_and_Payment_Payment_region() {
		switch (stateVector[1]) {
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money();
			exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted();
			exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money();
			exitAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1() {
		switch (stateVector[1]) {
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted();
			break;
		case main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money:
			exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region nettoyage */
	private void exitSequence_main_region_Fin_de_la_commande_nettoyage() {
		switch (stateVector[0]) {
		case main_region_Fin_de_la_commande_nettoyage_Nettoyage:
			exitSequence_main_region_Fin_de_la_commande_nettoyage_Nettoyage();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region fin de la commande/rendu monnaie */
	private void exitSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie() {
		switch (stateVector[1]) {
		case main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie:
			exitSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Récupérer gobelet */
	private void exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet() {
		switch (stateVector[2]) {
		case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret:
			exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret();
			break;
		case main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_:
			exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region gobelet */
	private void exitSequence_main_region_Preparation_de_la_boisson_gobelet() {
		switch (stateVector[0]) {
		case main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette:
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette();
			break;
		case main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet:
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet();
			break;
		case main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre:
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region eau */
	private void exitSequence_main_region_Preparation_de_la_boisson_eau() {
		switch (stateVector[1]) {
		case main_region_Preparation_de_la_boisson_eau_Chauffage:
			exitSequence_main_region_Preparation_de_la_boisson_eau_Chauffage();
			break;
		case main_region_Preparation_de_la_boisson_eau_AssezChauff_:
			exitSequence_main_region_Preparation_de_la_boisson_eau_AssezChauff_();
			break;
		case main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau:
			exitSequence_main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Choice_and_Payment_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1__entry_Default() {
		enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice_default();
	}
	
	/* Default react sequence for shallow history entry history */
	private void react_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_history() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NullState$) {
			shallowEnterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1();
		} else {
			enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Choice_and_Payment_Choice_region__entry_Default() {
		enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1__entry_Default() {
		enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money_default();
	}
	
	/* Default react sequence for shallow history entry History */
	private void react_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_History() {
		/* Enter the region with shallow history */
		if (historyVector[1] != State.$NullState$) {
			shallowEnterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1();
		} else {
			enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Choice_and_Payment_Payment_region__entry_Default() {
		enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Fin_de_la_commande_nettoyage__entry_Default() {
		enterSequence_main_region_Fin_de_la_commande_nettoyage_Nettoyage_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie__entry_Default() {
		enterSequence_main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Fin_de_la_commande_R_cup_rer_gobelet__entry_Default() {
		enterSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_de_la_boisson_gobelet__entry_Default() {
		enterSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_de_la_boisson_eau__entry_Default() {
		enterSequence_main_region_Preparation_de_la_boisson_eau_Chauffage_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Choice_and_Payment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[0]) && ((sCInterface.getSelected() && sCInterface.getPayedEnough())))) {
				exitSequence_main_region_Choice_and_Payment();
				sCInterface.raiseDoTransaction();
				
				enterSequence_main_region_End_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_Payment_Choice_region_Chosed_or_not_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.teaButton || (sCInterface.coffeeButton || sCInterface.expressoButton))) {
				exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
				entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
				enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed_default();
			} else {
				if (timeEvents[1]) {
					exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
					enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_default();
				} else {
					if ((sCInterface.insertCoin10 || (sCInterface.insertCoin25 || (sCInterface.insertCoin50 || sCInterface.nFC)))) {
						exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
						entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
						react_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_history();
					} else {
						if (sCInterface.cancelButton) {
							exitSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
							sCInterface.raiseCancel();
							
							entryAction_main_region_Choice_and_Payment_Choice_region_Chosed_or_not();
							enterSequence_main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_Drink_chosed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_Payment_Choice_region_Chosed_or_not_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_Payment_Choice_region_Chosed_or_not_r1_No_choice_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_Payment_Choice_region_Chosed_or_not_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_Payment_Payment_region_Payed_or_not_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.insertCoin10 || (sCInterface.insertCoin25 || sCInterface.insertCoin50))) {
				exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
				entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
				enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted_default();
				main_region_Choice_and_Payment_react(false);
			} else {
				if (timeEvents[2]) {
					exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
					sCInterface.raiseGiveBackMoney();
					
					enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_default();
				} else {
					if ((sCInterface.enoughMoneyInserted || sCInterface.nFC)) {
						exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
						entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
						enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money_default();
						main_region_Choice_and_Payment_react(false);
					} else {
						if ((sCInterface.coffeeButton || (sCInterface.teaButton || sCInterface.expressoButton))) {
							exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
							entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
							react_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_History();
						} else {
							if (sCInterface.cancelButton) {
								exitSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
								sCInterface.raiseGiveBackMoney();
								
								entryAction_main_region_Choice_and_Payment_Payment_region_Payed_or_not();
								enterSequence_main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money_default();
								main_region_Choice_and_Payment_react(false);
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_Payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_No_money_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_Payment_Payment_region_Payed_or_not_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Money_inserted_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_Payment_Payment_region_Payed_or_not_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_Payment_Payment_region_Payed_or_not_r1_Enough_money_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_Payment_Payment_region_Payed_or_not_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Fin_de_la_commande_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Fin_de_la_commande();
			enterSequence_main_region_Choice_and_Payment_default();
			react();
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Fin_de_la_commande_nettoyage_Nettoyage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Fin_de_la_commande_fin_de_la_commande_rendu_monnaie_Rendre_monnaie_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.getGobeletTaken()) {
				exitSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_pret();
				enterSequence_main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r__default();
				main_region_Fin_de_la_commande_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Fin_de_la_commande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Fin_de_la_commande_R_cup_rer_gobelet_Gobelet_r_cup_r__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Fin_de_la_commande_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_de_la_boisson_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_Preparation_de_la_boisson();
				enterSequence_main_region_Fin_de_la_commande_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_dosette();
			enterSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet_default();
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Preparation_de_la_boisson_gobelet_Positionnement_gobelet();
			enterSequence_main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre_default();
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_de_la_boisson_gobelet_Ajout_du_sucre_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_de_la_boisson_eau_Chauffage_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[4]) && (sCInterface.getHotEnough()))) {
				exitSequence_main_region_Preparation_de_la_boisson_eau_Chauffage();
				enterSequence_main_region_Preparation_de_la_boisson_eau_AssezChauff__default();
				main_region_Preparation_de_la_boisson_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_de_la_boisson_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_de_la_boisson_eau_AssezChauff__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[5]) && (sCInterface.getGobeletOk()))) {
				exitSequence_main_region_Preparation_de_la_boisson_eau_AssezChauff_();
				enterSequence_main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau_default();
				main_region_Preparation_de_la_boisson_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_de_la_boisson_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_de_la_boisson_eau_Versement_de_l_eau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_de_la_boisson_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_End_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.gobeletRecupere) {
				exitSequence_main_region_End();
				enterSequence_main_region_Preparation_de_la_boisson_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
