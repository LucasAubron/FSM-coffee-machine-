/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.2020.project.mvp;

import fr.univcotedazur.polytech.si4.fsm.2020.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class MVPStatemachine implements IMVPStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean optionButton;
		
		
		public void raiseOptionButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							optionButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean podPlacement;
		
		
		public void raisePodPlacement() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							podPlacement = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coffeeButton;
		
		
		public void raiseCoffeeButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coffeeButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean teaButton;
		
		
		public void raiseTeaButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							teaButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean expressoButton;
		
		
		public void raiseExpressoButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							expressoButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancelButton;
		
		
		public void raiseCancelButton() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancelButton = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean insertCoin10;
		
		
		public void raiseInsertCoin10() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							insertCoin10 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean insertCoin25;
		
		
		public void raiseInsertCoin25() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							insertCoin25 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean insertCoin50;
		
		
		public void raiseInsertCoin50() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							insertCoin50 = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nFC;
		
		
		public void raiseNFC() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nFC = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean enoughMoneyInserted;
		
		
		public void raiseEnoughMoneyInserted() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							enoughMoneyInserted = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cupPickedUp;
		
		
		public void raiseCupPickedUp() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cupPickedUp = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean positionnerDosette;
		
		
		public void raisePositionnerDosette() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							positionnerDosette = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean seedGrind;
		
		
		public void raiseSeedGrind() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							seedGrind = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean bagPlacement;
		
		
		public void raiseBagPlacement() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							bagPlacement = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean waitingForWater;
		
		
		public void raiseWaitingForWater() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							waitingForWater = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean endWaterHeat;
		
		
		public void raiseEndWaterHeat() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							endWaterHeat = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean endFirstStep;
		
		
		public void raiseEndFirstStep() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							endFirstStep = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean endSecondStep;
		
		
		public void raiseEndSecondStep() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							endSecondStep = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean step2Expresso;
		
		
		public void raiseStep2Expresso() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							step2Expresso = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean endPackSeed;
		
		
		public void raiseEndPackSeed() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							endPackSeed = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean waterHeated;
		
		
		public void raiseWaterHeated() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							waterHeated = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean waitForCup;
		
		
		public void raiseWaitForCup() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							waitForCup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cupIsPlaced;
		
		
		public void raiseCupIsPlaced() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cupIsPlaced = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean giveCup;
		
		
		public void raiseGiveCup() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							giveCup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cupIsTaken;
		
		
		public void raiseCupIsTaken() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cupIsTaken = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean letInfuse;
		
		
		public void raiseLetInfuse() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							letInfuse = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean milk;
		
		
		public void raiseMilk() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							milk = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean sirup;
		
		
		public void raiseSirup() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							sirup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean crust;
		
		
		public void raiseCrust() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							crust = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean vanilla;
		
		
		public void raiseVanilla() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							vanilla = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean validateOptions;
		
		
		public void raiseValidateOptions() {
			synchronized(MVPStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							validateOptions = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean vanillaChosed;
		
		
		public boolean isRaisedVanillaChosed() {
			synchronized(MVPStatemachine.this) {
				return vanillaChosed;
			}
		}
		
		protected void raiseVanillaChosed() {
			synchronized(MVPStatemachine.this) {
				vanillaChosed = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onVanillaChosedRaised();
				}
			}
		}
		
		private boolean sirupChosed;
		
		
		public boolean isRaisedSirupChosed() {
			synchronized(MVPStatemachine.this) {
				return sirupChosed;
			}
		}
		
		protected void raiseSirupChosed() {
			synchronized(MVPStatemachine.this) {
				sirupChosed = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onSirupChosedRaised();
				}
			}
		}
		
		private boolean crustChosed;
		
		
		public boolean isRaisedCrustChosed() {
			synchronized(MVPStatemachine.this) {
				return crustChosed;
			}
		}
		
		protected void raiseCrustChosed() {
			synchronized(MVPStatemachine.this) {
				crustChosed = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCrustChosedRaised();
				}
			}
		}
		
		private boolean beginWaterHeat;
		
		
		public boolean isRaisedBeginWaterHeat() {
			synchronized(MVPStatemachine.this) {
				return beginWaterHeat;
			}
		}
		
		protected void raiseBeginWaterHeat() {
			synchronized(MVPStatemachine.this) {
				beginWaterHeat = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onBeginWaterHeatRaised();
				}
			}
		}
		
		private boolean milkChosed;
		
		
		public boolean isRaisedMilkChosed() {
			synchronized(MVPStatemachine.this) {
				return milkChosed;
			}
		}
		
		protected void raiseMilkChosed() {
			synchronized(MVPStatemachine.this) {
				milkChosed = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onMilkChosedRaised();
				}
			}
		}
		
		private boolean disableMissingIngredients;
		
		
		public boolean isRaisedDisableMissingIngredients() {
			synchronized(MVPStatemachine.this) {
				return disableMissingIngredients;
			}
		}
		
		protected void raiseDisableMissingIngredients() {
			synchronized(MVPStatemachine.this) {
				disableMissingIngredients = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDisableMissingIngredientsRaised();
				}
			}
		}
		
		private boolean beginMachineCleaning;
		
		
		public boolean isRaisedBeginMachineCleaning() {
			synchronized(MVPStatemachine.this) {
				return beginMachineCleaning;
			}
		}
		
		protected void raiseBeginMachineCleaning() {
			synchronized(MVPStatemachine.this) {
				beginMachineCleaning = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onBeginMachineCleaningRaised();
				}
			}
		}
		
		private boolean addSugar;
		
		
		public boolean isRaisedAddSugar() {
			synchronized(MVPStatemachine.this) {
				return addSugar;
			}
		}
		
		protected void raiseAddSugar() {
			synchronized(MVPStatemachine.this) {
				addSugar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onAddSugarRaised();
				}
			}
		}
		
		private boolean seedPacking;
		
		
		public boolean isRaisedSeedPacking() {
			synchronized(MVPStatemachine.this) {
				return seedPacking;
			}
		}
		
		protected void raiseSeedPacking() {
			synchronized(MVPStatemachine.this) {
				seedPacking = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onSeedPackingRaised();
				}
			}
		}
		
		private boolean cupPlacing;
		
		
		public boolean isRaisedCupPlacing() {
			synchronized(MVPStatemachine.this) {
				return cupPlacing;
			}
		}
		
		protected void raiseCupPlacing() {
			synchronized(MVPStatemachine.this) {
				cupPlacing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCupPlacingRaised();
				}
			}
		}
		
		private boolean bagPlacing;
		
		
		public boolean isRaisedBagPlacing() {
			synchronized(MVPStatemachine.this) {
				return bagPlacing;
			}
		}
		
		protected void raiseBagPlacing() {
			synchronized(MVPStatemachine.this) {
				bagPlacing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onBagPlacingRaised();
				}
			}
		}
		
		private boolean seedGrinding;
		
		
		public boolean isRaisedSeedGrinding() {
			synchronized(MVPStatemachine.this) {
				return seedGrinding;
			}
		}
		
		protected void raiseSeedGrinding() {
			synchronized(MVPStatemachine.this) {
				seedGrinding = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onSeedGrindingRaised();
				}
			}
		}
		
		private boolean podPlacing;
		
		
		public boolean isRaisedPodPlacing() {
			synchronized(MVPStatemachine.this) {
				return podPlacing;
			}
		}
		
		protected void raisePodPlacing() {
			synchronized(MVPStatemachine.this) {
				podPlacing = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPodPlacingRaised();
				}
			}
		}
		
		private boolean waitForWaterPoured;
		
		
		public boolean isRaisedWaitForWaterPoured() {
			synchronized(MVPStatemachine.this) {
				return waitForWaterPoured;
			}
		}
		
		protected void raiseWaitForWaterPoured() {
			synchronized(MVPStatemachine.this) {
				waitForWaterPoured = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaitForWaterPouredRaised();
				}
			}
		}
		
		private boolean waitForWaterHeated;
		
		
		public boolean isRaisedWaitForWaterHeated() {
			synchronized(MVPStatemachine.this) {
				return waitForWaterHeated;
			}
		}
		
		protected void raiseWaitForWaterHeated() {
			synchronized(MVPStatemachine.this) {
				waitForWaterHeated = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaitForWaterHeatedRaised();
				}
			}
		}
		
		private boolean coffeeChosed;
		
		
		public boolean isRaisedCoffeeChosed() {
			synchronized(MVPStatemachine.this) {
				return coffeeChosed;
			}
		}
		
		protected void raiseCoffeeChosed() {
			synchronized(MVPStatemachine.this) {
				coffeeChosed = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCoffeeChosedRaised();
				}
			}
		}
		
		private boolean teaChosed;
		
		
		public boolean isRaisedTeaChosed() {
			synchronized(MVPStatemachine.this) {
				return teaChosed;
			}
		}
		
		protected void raiseTeaChosed() {
			synchronized(MVPStatemachine.this) {
				teaChosed = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTeaChosedRaised();
				}
			}
		}
		
		private boolean expressoChosed;
		
		
		public boolean isRaisedExpressoChosed() {
			synchronized(MVPStatemachine.this) {
				return expressoChosed;
			}
		}
		
		protected void raiseExpressoChosed() {
			synchronized(MVPStatemachine.this) {
				expressoChosed = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onExpressoChosedRaised();
				}
			}
		}
		
		private boolean coin10Inserted;
		
		
		public boolean isRaisedCoin10Inserted() {
			synchronized(MVPStatemachine.this) {
				return coin10Inserted;
			}
		}
		
		protected void raiseCoin10Inserted() {
			synchronized(MVPStatemachine.this) {
				coin10Inserted = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCoin10InsertedRaised();
				}
			}
		}
		
		private boolean coin25Inserted;
		
		
		public boolean isRaisedCoin25Inserted() {
			synchronized(MVPStatemachine.this) {
				return coin25Inserted;
			}
		}
		
		protected void raiseCoin25Inserted() {
			synchronized(MVPStatemachine.this) {
				coin25Inserted = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCoin25InsertedRaised();
				}
			}
		}
		
		private boolean coin50Inserted;
		
		
		public boolean isRaisedCoin50Inserted() {
			synchronized(MVPStatemachine.this) {
				return coin50Inserted;
			}
		}
		
		protected void raiseCoin50Inserted() {
			synchronized(MVPStatemachine.this) {
				coin50Inserted = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCoin50InsertedRaised();
				}
			}
		}
		
		private boolean cancel;
		
		
		public boolean isRaisedCancel() {
			synchronized(MVPStatemachine.this) {
				return cancel;
			}
		}
		
		protected void raiseCancel() {
			synchronized(MVPStatemachine.this) {
				cancel = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelRaised();
				}
			}
		}
		
		private boolean nFCPayment;
		
		
		public boolean isRaisedNFCPayment() {
			synchronized(MVPStatemachine.this) {
				return nFCPayment;
			}
		}
		
		protected void raiseNFCPayment() {
			synchronized(MVPStatemachine.this) {
				nFCPayment = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNFCPaymentRaised();
				}
			}
		}
		
		private boolean giveBackMoney;
		
		
		public boolean isRaisedGiveBackMoney() {
			synchronized(MVPStatemachine.this) {
				return giveBackMoney;
			}
		}
		
		protected void raiseGiveBackMoney() {
			synchronized(MVPStatemachine.this) {
				giveBackMoney = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGiveBackMoneyRaised();
				}
			}
		}
		
		private boolean doTransaction;
		
		
		public boolean isRaisedDoTransaction() {
			synchronized(MVPStatemachine.this) {
				return doTransaction;
			}
		}
		
		protected void raiseDoTransaction() {
			synchronized(MVPStatemachine.this) {
				doTransaction = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoTransactionRaised();
				}
			}
		}
		
		private boolean selected;
		
		public synchronized boolean getSelected() {
			synchronized(MVPStatemachine.this) {
				return selected;
			}
		}
		
		public void setSelected(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.selected = value;
			}
		}
		
		private boolean payedEnough;
		
		public synchronized boolean getPayedEnough() {
			synchronized(MVPStatemachine.this) {
				return payedEnough;
			}
		}
		
		public void setPayedEnough(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.payedEnough = value;
			}
		}
		
		private boolean hotEnough;
		
		public synchronized boolean getHotEnough() {
			synchronized(MVPStatemachine.this) {
				return hotEnough;
			}
		}
		
		public void setHotEnough(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.hotEnough = value;
			}
		}
		
		private boolean gobeletOk;
		
		public synchronized boolean getGobeletOk() {
			synchronized(MVPStatemachine.this) {
				return gobeletOk;
			}
		}
		
		public void setGobeletOk(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.gobeletOk = value;
			}
		}
		
		private boolean gobeletTaken;
		
		public synchronized boolean getGobeletTaken() {
			synchronized(MVPStatemachine.this) {
				return gobeletTaken;
			}
		}
		
		public void setGobeletTaken(boolean value) {
			synchronized(MVPStatemachine.this) {
				this.gobeletTaken = value;
			}
		}
		
		protected void clearEvents() {
			optionButton = false;
			podPlacement = false;
			coffeeButton = false;
			teaButton = false;
			expressoButton = false;
			cancelButton = false;
			insertCoin10 = false;
			insertCoin25 = false;
			insertCoin50 = false;
			nFC = false;
			enoughMoneyInserted = false;
			cupPickedUp = false;
			positionnerDosette = false;
			seedGrind = false;
			bagPlacement = false;
			waitingForWater = false;
			endWaterHeat = false;
			endFirstStep = false;
			endSecondStep = false;
			step2Expresso = false;
			endPackSeed = false;
			waterHeated = false;
			waitForCup = false;
			cupIsPlaced = false;
			giveCup = false;
			cupIsTaken = false;
			letInfuse = false;
			milk = false;
			sirup = false;
			crust = false;
			vanilla = false;
			validateOptions = false;
		}
		protected void clearOutEvents() {
		
		vanillaChosed = false;
		sirupChosed = false;
		crustChosed = false;
		beginWaterHeat = false;
		milkChosed = false;
		disableMissingIngredients = false;
		beginMachineCleaning = false;
		addSugar = false;
		seedPacking = false;
		cupPlacing = false;
		bagPlacing = false;
		seedGrinding = false;
		podPlacing = false;
		waitForWaterPoured = false;
		waitForWaterHeated = false;
		coffeeChosed = false;
		teaChosed = false;
		expressoChosed = false;
		coin10Inserted = false;
		coin25Inserted = false;
		coin50Inserted = false;
		cancel = false;
		nFCPayment = false;
		giveBackMoney = false;
		doTransaction = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Step1,
		main_region_Step1_r1_Water_heat,
		main_region_Step1_r2_First_step,
		main_region_Step1_r2_Drink_difference,
		main_region_Step2,
		main_region_Step2_r1_Cup_Placement,
		main_region_Step2_r2_Drink_difference,
		main_region_Step2_r2_ExpressoCase,
		main_region_Step2_r2_ExpressoCase_r1_PackSeed,
		main_region_Step2_r2_ExpressoCase_r1__final_,
		main_region_Step2_r2_ExpressoCase_r2_WaitWater,
		main_region_Step2_r2_ExpressoCase_r2__final_,
		main_region_Step2_r2_Waiting_for_water_to_heat,
		main_region_Step3,
		main_region_Step3_r1__final_,
		main_region_Step3_r1_Water_wait,
		main_region_Step3_r2_Sugar_added,
		main_region_Step3_r2__final_,
		main_region_Choice_and_payment,
		main_region_Choice_and_payment_r1_No_drink_selected,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille,
		main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready,
		main_region_WaitForCupToBeTaken,
		main_region_CleanMachine,
		main_region_Infusing,
		main_region_CheckIngredients,
		$NullState$
	};
	
	private State[] historyVector = new State[3];
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public MVPStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		for (int i = 0; i < 3; i++) {
			historyVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSelected(false);
		
		sCInterface.setPayedEnough(false);
		
		sCInterface.setHotEnough(false);
		
		sCInterface.setGobeletOk(false);
		
		sCInterface.setGobeletTaken(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
				case main_region_Step1_r1_Water_heat:
					main_region_Step1_r1_Water_heat_react(true);
					break;
				case main_region_Step1_r2_First_step:
					main_region_Step1_r2_First_step_react(true);
					break;
				case main_region_Step1_r2_Drink_difference:
					main_region_Step1_r2_Drink_difference_react(true);
					break;
				case main_region_Step2_r1_Cup_Placement:
					main_region_Step2_r1_Cup_Placement_react(true);
					break;
				case main_region_Step2_r2_Drink_difference:
					main_region_Step2_r2_Drink_difference_react(true);
					break;
				case main_region_Step2_r2_ExpressoCase_r1_PackSeed:
					main_region_Step2_r2_ExpressoCase_r1_PackSeed_react(true);
					break;
				case main_region_Step2_r2_ExpressoCase_r1__final_:
					main_region_Step2_r2_ExpressoCase_r1__final__react(true);
					break;
				case main_region_Step2_r2_ExpressoCase_r2_WaitWater:
					main_region_Step2_r2_ExpressoCase_r2_WaitWater_react(true);
					break;
				case main_region_Step2_r2_ExpressoCase_r2__final_:
					main_region_Step2_r2_ExpressoCase_r2__final__react(true);
					break;
				case main_region_Step2_r2_Waiting_for_water_to_heat:
					main_region_Step2_r2_Waiting_for_water_to_heat_react(true);
					break;
				case main_region_Step3_r1__final_:
					main_region_Step3_r1__final__react(true);
					break;
				case main_region_Step3_r1_Water_wait:
					main_region_Step3_r1_Water_wait_react(true);
					break;
				case main_region_Step3_r2_Sugar_added:
					main_region_Step3_r2_Sugar_added_react(true);
					break;
				case main_region_Step3_r2__final_:
					main_region_Step3_r2__final__react(true);
					break;
				case main_region_Choice_and_payment_r1_No_drink_selected:
					main_region_Choice_and_payment_r1_No_drink_selected_react(true);
					break;
				case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money:
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money_react(true);
					break;
				case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options:
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options_react(true);
					break;
				case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait:
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait_react(true);
					break;
				case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton:
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton_react(true);
					break;
				case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop:
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop_react(true);
					break;
				case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille:
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille_react(true);
					break;
				case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready:
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_react(true);
					break;
				case main_region_WaitForCupToBeTaken:
					main_region_WaitForCupToBeTaken_react(true);
					break;
				case main_region_CleanMachine:
					main_region_CleanMachine_react(true);
					break;
				case main_region_Infusing:
					main_region_Infusing_react(true);
					break;
				case main_region_CheckIngredients:
					main_region_CheckIngredients_react(true);
					break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return (stateVector[0] == State.main_region_Step3_r1__final_) && (stateVector[1] == State.main_region_Step2_r2_ExpressoCase_r1__final_ || stateVector[1] == State.main_region_Step3_r2__final_) && (stateVector[2] == State.main_region_Step2_r2_ExpressoCase_r2__final_);
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Step1:
			return stateVector[0].ordinal() >= State.
					main_region_Step1.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step1_r2_Drink_difference.ordinal();
		case main_region_Step1_r1_Water_heat:
			return stateVector[0] == State.main_region_Step1_r1_Water_heat;
		case main_region_Step1_r2_First_step:
			return stateVector[1] == State.main_region_Step1_r2_First_step;
		case main_region_Step1_r2_Drink_difference:
			return stateVector[1] == State.main_region_Step1_r2_Drink_difference;
		case main_region_Step2:
			return stateVector[0].ordinal() >= State.
					main_region_Step2.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step2_r2_Waiting_for_water_to_heat.ordinal();
		case main_region_Step2_r1_Cup_Placement:
			return stateVector[0] == State.main_region_Step2_r1_Cup_Placement;
		case main_region_Step2_r2_Drink_difference:
			return stateVector[1] == State.main_region_Step2_r2_Drink_difference;
		case main_region_Step2_r2_ExpressoCase:
			return stateVector[1].ordinal() >= State.
					main_region_Step2_r2_ExpressoCase.ordinal()&& stateVector[1].ordinal() <= State.main_region_Step2_r2_ExpressoCase_r2__final_.ordinal();
		case main_region_Step2_r2_ExpressoCase_r1_PackSeed:
			return stateVector[1] == State.main_region_Step2_r2_ExpressoCase_r1_PackSeed;
		case main_region_Step2_r2_ExpressoCase_r1__final_:
			return stateVector[1] == State.main_region_Step2_r2_ExpressoCase_r1__final_;
		case main_region_Step2_r2_ExpressoCase_r2_WaitWater:
			return stateVector[2] == State.main_region_Step2_r2_ExpressoCase_r2_WaitWater;
		case main_region_Step2_r2_ExpressoCase_r2__final_:
			return stateVector[2] == State.main_region_Step2_r2_ExpressoCase_r2__final_;
		case main_region_Step2_r2_Waiting_for_water_to_heat:
			return stateVector[1] == State.main_region_Step2_r2_Waiting_for_water_to_heat;
		case main_region_Step3:
			return stateVector[0].ordinal() >= State.
					main_region_Step3.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step3_r2__final_.ordinal();
		case main_region_Step3_r1__final_:
			return stateVector[0] == State.main_region_Step3_r1__final_;
		case main_region_Step3_r1_Water_wait:
			return stateVector[0] == State.main_region_Step3_r1_Water_wait;
		case main_region_Step3_r2_Sugar_added:
			return stateVector[1] == State.main_region_Step3_r2_Sugar_added;
		case main_region_Step3_r2__final_:
			return stateVector[1] == State.main_region_Step3_r2__final_;
		case main_region_Choice_and_payment:
			return stateVector[0].ordinal() >= State.
					main_region_Choice_and_payment.ordinal()&& stateVector[0].ordinal() <= State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready.ordinal();
		case main_region_Choice_and_payment_r1_No_drink_selected:
			return stateVector[0] == State.main_region_Choice_and_payment_r1_No_drink_selected;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money:
			return stateVector[0].ordinal() >= State.
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money.ordinal()&& stateVector[0].ordinal() <= State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready.ordinal();
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money:
			return stateVector[0] == State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options:
			return stateVector[1] == State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait:
			return stateVector[1] == State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton:
			return stateVector[1] == State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop:
			return stateVector[1] == State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille:
			return stateVector[1] == State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready:
			return stateVector[1] == State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready;
		case main_region_WaitForCupToBeTaken:
			return stateVector[0] == State.main_region_WaitForCupToBeTaken;
		case main_region_CleanMachine:
			return stateVector[0] == State.main_region_CleanMachine;
		case main_region_Infusing:
			return stateVector[0] == State.main_region_Infusing;
		case main_region_CheckIngredients:
			return stateVector[0] == State.main_region_CheckIngredients;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseOptionButton() {
		sCInterface.raiseOptionButton();
	}
	
	public synchronized void raisePodPlacement() {
		sCInterface.raisePodPlacement();
	}
	
	public synchronized void raiseCoffeeButton() {
		sCInterface.raiseCoffeeButton();
	}
	
	public synchronized void raiseTeaButton() {
		sCInterface.raiseTeaButton();
	}
	
	public synchronized void raiseExpressoButton() {
		sCInterface.raiseExpressoButton();
	}
	
	public synchronized void raiseCancelButton() {
		sCInterface.raiseCancelButton();
	}
	
	public synchronized void raiseInsertCoin10() {
		sCInterface.raiseInsertCoin10();
	}
	
	public synchronized void raiseInsertCoin25() {
		sCInterface.raiseInsertCoin25();
	}
	
	public synchronized void raiseInsertCoin50() {
		sCInterface.raiseInsertCoin50();
	}
	
	public synchronized void raiseNFC() {
		sCInterface.raiseNFC();
	}
	
	public synchronized void raiseEnoughMoneyInserted() {
		sCInterface.raiseEnoughMoneyInserted();
	}
	
	public synchronized void raiseCupPickedUp() {
		sCInterface.raiseCupPickedUp();
	}
	
	public synchronized void raisePositionnerDosette() {
		sCInterface.raisePositionnerDosette();
	}
	
	public synchronized void raiseSeedGrind() {
		sCInterface.raiseSeedGrind();
	}
	
	public synchronized void raiseBagPlacement() {
		sCInterface.raiseBagPlacement();
	}
	
	public synchronized void raiseWaitingForWater() {
		sCInterface.raiseWaitingForWater();
	}
	
	public synchronized void raiseEndWaterHeat() {
		sCInterface.raiseEndWaterHeat();
	}
	
	public synchronized void raiseEndFirstStep() {
		sCInterface.raiseEndFirstStep();
	}
	
	public synchronized void raiseEndSecondStep() {
		sCInterface.raiseEndSecondStep();
	}
	
	public synchronized void raiseStep2Expresso() {
		sCInterface.raiseStep2Expresso();
	}
	
	public synchronized void raiseEndPackSeed() {
		sCInterface.raiseEndPackSeed();
	}
	
	public synchronized void raiseWaterHeated() {
		sCInterface.raiseWaterHeated();
	}
	
	public synchronized void raiseWaitForCup() {
		sCInterface.raiseWaitForCup();
	}
	
	public synchronized void raiseCupIsPlaced() {
		sCInterface.raiseCupIsPlaced();
	}
	
	public synchronized void raiseGiveCup() {
		sCInterface.raiseGiveCup();
	}
	
	public synchronized void raiseCupIsTaken() {
		sCInterface.raiseCupIsTaken();
	}
	
	public synchronized void raiseLetInfuse() {
		sCInterface.raiseLetInfuse();
	}
	
	public synchronized void raiseMilk() {
		sCInterface.raiseMilk();
	}
	
	public synchronized void raiseSirup() {
		sCInterface.raiseSirup();
	}
	
	public synchronized void raiseCrust() {
		sCInterface.raiseCrust();
	}
	
	public synchronized void raiseVanilla() {
		sCInterface.raiseVanilla();
	}
	
	public synchronized void raiseValidateOptions() {
		sCInterface.raiseValidateOptions();
	}
	
	public synchronized boolean isRaisedVanillaChosed() {
		return sCInterface.isRaisedVanillaChosed();
	}
	
	public synchronized boolean isRaisedSirupChosed() {
		return sCInterface.isRaisedSirupChosed();
	}
	
	public synchronized boolean isRaisedCrustChosed() {
		return sCInterface.isRaisedCrustChosed();
	}
	
	public synchronized boolean isRaisedBeginWaterHeat() {
		return sCInterface.isRaisedBeginWaterHeat();
	}
	
	public synchronized boolean isRaisedMilkChosed() {
		return sCInterface.isRaisedMilkChosed();
	}
	
	public synchronized boolean isRaisedDisableMissingIngredients() {
		return sCInterface.isRaisedDisableMissingIngredients();
	}
	
	public synchronized boolean isRaisedBeginMachineCleaning() {
		return sCInterface.isRaisedBeginMachineCleaning();
	}
	
	public synchronized boolean isRaisedAddSugar() {
		return sCInterface.isRaisedAddSugar();
	}
	
	public synchronized boolean isRaisedSeedPacking() {
		return sCInterface.isRaisedSeedPacking();
	}
	
	public synchronized boolean isRaisedCupPlacing() {
		return sCInterface.isRaisedCupPlacing();
	}
	
	public synchronized boolean isRaisedBagPlacing() {
		return sCInterface.isRaisedBagPlacing();
	}
	
	public synchronized boolean isRaisedSeedGrinding() {
		return sCInterface.isRaisedSeedGrinding();
	}
	
	public synchronized boolean isRaisedPodPlacing() {
		return sCInterface.isRaisedPodPlacing();
	}
	
	public synchronized boolean isRaisedWaitForWaterPoured() {
		return sCInterface.isRaisedWaitForWaterPoured();
	}
	
	public synchronized boolean isRaisedWaitForWaterHeated() {
		return sCInterface.isRaisedWaitForWaterHeated();
	}
	
	public synchronized boolean isRaisedCoffeeChosed() {
		return sCInterface.isRaisedCoffeeChosed();
	}
	
	public synchronized boolean isRaisedTeaChosed() {
		return sCInterface.isRaisedTeaChosed();
	}
	
	public synchronized boolean isRaisedExpressoChosed() {
		return sCInterface.isRaisedExpressoChosed();
	}
	
	public synchronized boolean isRaisedCoin10Inserted() {
		return sCInterface.isRaisedCoin10Inserted();
	}
	
	public synchronized boolean isRaisedCoin25Inserted() {
		return sCInterface.isRaisedCoin25Inserted();
	}
	
	public synchronized boolean isRaisedCoin50Inserted() {
		return sCInterface.isRaisedCoin50Inserted();
	}
	
	public synchronized boolean isRaisedCancel() {
		return sCInterface.isRaisedCancel();
	}
	
	public synchronized boolean isRaisedNFCPayment() {
		return sCInterface.isRaisedNFCPayment();
	}
	
	public synchronized boolean isRaisedGiveBackMoney() {
		return sCInterface.isRaisedGiveBackMoney();
	}
	
	public synchronized boolean isRaisedDoTransaction() {
		return sCInterface.isRaisedDoTransaction();
	}
	
	public synchronized boolean getSelected() {
		return sCInterface.getSelected();
	}
	
	public synchronized void setSelected(boolean value) {
		sCInterface.setSelected(value);
	}
	
	public synchronized boolean getPayedEnough() {
		return sCInterface.getPayedEnough();
	}
	
	public synchronized void setPayedEnough(boolean value) {
		sCInterface.setPayedEnough(value);
	}
	
	public synchronized boolean getHotEnough() {
		return sCInterface.getHotEnough();
	}
	
	public synchronized void setHotEnough(boolean value) {
		sCInterface.setHotEnough(value);
	}
	
	public synchronized boolean getGobeletOk() {
		return sCInterface.getGobeletOk();
	}
	
	public synchronized void setGobeletOk(boolean value) {
		sCInterface.setGobeletOk(value);
	}
	
	public synchronized boolean getGobeletTaken() {
		return sCInterface.getGobeletTaken();
	}
	
	public synchronized void setGobeletTaken(boolean value) {
		sCInterface.setGobeletTaken(value);
	}
	
	/* Entry action for state 'Water heat'. */
	private void entryAction_main_region_Step1_r1_Water_heat() {
		sCInterface.raiseBeginWaterHeat();
	}
	
	/* Entry action for state 'Cup Placement'. */
	private void entryAction_main_region_Step2_r1_Cup_Placement() {
		timer.setTimer(this, 0, 3000, false);
		
		sCInterface.raiseCupPlacing();
	}
	
	/* Entry action for state 'PackSeed'. */
	private void entryAction_main_region_Step2_r2_ExpressoCase_r1_PackSeed() {
		sCInterface.raiseSeedPacking();
	}
	
	/* Entry action for state 'WaitWater'. */
	private void entryAction_main_region_Step2_r2_ExpressoCase_r2_WaitWater() {
		sCInterface.raiseWaitForWaterHeated();
	}
	
	/* Entry action for state 'Water wait'. */
	private void entryAction_main_region_Step3_r1_Water_wait() {
		sCInterface.raiseWaitForWaterPoured();
	}
	
	/* Entry action for state 'Sugar added'. */
	private void entryAction_main_region_Step3_r2_Sugar_added() {
		sCInterface.raiseAddSugar();
	}
	
	/* Entry action for state 'Choice and payment'. */
	private void entryAction_main_region_Choice_and_payment() {
		timer.setTimer(this, 1, 5000, false);
	}
	
	/* Entry action for state 'CleanMachine'. */
	private void entryAction_main_region_CleanMachine() {
		timer.setTimer(this, 2, 10000, false);
		
		sCInterface.raiseBeginMachineCleaning();
	}
	
	/* Entry action for state 'CheckIngredients'. */
	private void entryAction_main_region_CheckIngredients() {
		timer.setTimer(this, 3, 10, false);
	}
	
	/* Exit action for state 'Cup Placement'. */
	private void exitAction_main_region_Step2_r1_Cup_Placement() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Choice and payment'. */
	private void exitAction_main_region_Choice_and_payment() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'CleanMachine'. */
	private void exitAction_main_region_CleanMachine() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'CheckIngredients'. */
	private void exitAction_main_region_CheckIngredients() {
		timer.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state Step1 */
	private void enterSequence_main_region_Step1_default() {
		enterSequence_main_region_Step1_r1_default();
		enterSequence_main_region_Step1_r2_default();
	}
	
	/* 'default' enter sequence for state Water heat */
	private void enterSequence_main_region_Step1_r1_Water_heat_default() {
		entryAction_main_region_Step1_r1_Water_heat();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step1_r1_Water_heat;
	}
	
	/* 'default' enter sequence for state First step */
	private void enterSequence_main_region_Step1_r2_First_step_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step1_r2_First_step;
	}
	
	/* 'default' enter sequence for state Drink difference */
	private void enterSequence_main_region_Step1_r2_Drink_difference_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step1_r2_Drink_difference;
	}
	
	/* 'default' enter sequence for state Step2 */
	private void enterSequence_main_region_Step2_default() {
		enterSequence_main_region_Step2_r1_default();
		enterSequence_main_region_Step2_r2_default();
	}
	
	/* 'default' enter sequence for state Cup Placement */
	private void enterSequence_main_region_Step2_r1_Cup_Placement_default() {
		entryAction_main_region_Step2_r1_Cup_Placement();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step2_r1_Cup_Placement;
	}
	
	/* 'default' enter sequence for state Drink difference */
	private void enterSequence_main_region_Step2_r2_Drink_difference_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step2_r2_Drink_difference;
	}
	
	/* 'default' enter sequence for state ExpressoCase */
	private void enterSequence_main_region_Step2_r2_ExpressoCase_default() {
		enterSequence_main_region_Step2_r2_ExpressoCase_r1_default();
		enterSequence_main_region_Step2_r2_ExpressoCase_r2_default();
	}
	
	/* 'default' enter sequence for state PackSeed */
	private void enterSequence_main_region_Step2_r2_ExpressoCase_r1_PackSeed_default() {
		entryAction_main_region_Step2_r2_ExpressoCase_r1_PackSeed();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step2_r2_ExpressoCase_r1_PackSeed;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_Step2_r2_ExpressoCase_r1__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step2_r2_ExpressoCase_r1__final_;
	}
	
	/* 'default' enter sequence for state WaitWater */
	private void enterSequence_main_region_Step2_r2_ExpressoCase_r2_WaitWater_default() {
		entryAction_main_region_Step2_r2_ExpressoCase_r2_WaitWater();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Step2_r2_ExpressoCase_r2_WaitWater;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_Step2_r2_ExpressoCase_r2__final__default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Step2_r2_ExpressoCase_r2__final_;
	}
	
	/* 'default' enter sequence for state Waiting for water to heat */
	private void enterSequence_main_region_Step2_r2_Waiting_for_water_to_heat_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step2_r2_Waiting_for_water_to_heat;
	}
	
	/* 'default' enter sequence for state Step3 */
	private void enterSequence_main_region_Step3_default() {
		enterSequence_main_region_Step3_r1_default();
		enterSequence_main_region_Step3_r2_default();
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_Step3_r1__final__default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step3_r1__final_;
	}
	
	/* 'default' enter sequence for state Water wait */
	private void enterSequence_main_region_Step3_r1_Water_wait_default() {
		entryAction_main_region_Step3_r1_Water_wait();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step3_r1_Water_wait;
	}
	
	/* 'default' enter sequence for state Sugar added */
	private void enterSequence_main_region_Step3_r2_Sugar_added_default() {
		entryAction_main_region_Step3_r2_Sugar_added();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step3_r2_Sugar_added;
	}
	
	/* Default enter sequence for state null */
	private void enterSequence_main_region_Step3_r2__final__default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step3_r2__final_;
	}
	
	/* 'default' enter sequence for state Choice and payment */
	private void enterSequence_main_region_Choice_and_payment_default() {
		entryAction_main_region_Choice_and_payment();
		enterSequence_main_region_Choice_and_payment_r1_default();
	}
	
	/* 'default' enter sequence for state No_drink_selected */
	private void enterSequence_main_region_Choice_and_payment_r1_No_drink_selected_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Choice_and_payment_r1_No_drink_selected;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Drink selected & not enough money */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state No options */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options;
		
		historyVector[2] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Lait */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait;
		
		historyVector[2] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Crouton */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton;
		
		historyVector[2] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Sirop */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop;
		
		historyVector[2] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Glace vanille */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille;
		
		historyVector[2] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Ready */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready;
		
		historyVector[2] = stateVector[1];
	}
	
	/* 'default' enter sequence for state WaitForCupToBeTaken */
	private void enterSequence_main_region_WaitForCupToBeTaken_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_WaitForCupToBeTaken;
	}
	
	/* 'default' enter sequence for state CleanMachine */
	private void enterSequence_main_region_CleanMachine_default() {
		entryAction_main_region_CleanMachine();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_CleanMachine;
	}
	
	/* 'default' enter sequence for state Infusing */
	private void enterSequence_main_region_Infusing_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Infusing;
	}
	
	/* 'default' enter sequence for state CheckIngredients */
	private void enterSequence_main_region_CheckIngredients_default() {
		entryAction_main_region_CheckIngredients();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_CheckIngredients;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step1_r1_default() {
		react_main_region_Step1_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step1_r2_default() {
		react_main_region_Step1_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step2_r1_default() {
		react_main_region_Step2_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step2_r2_default() {
		react_main_region_Step2_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step2_r2_ExpressoCase_r1_default() {
		react_main_region_Step2_r2_ExpressoCase_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step2_r2_ExpressoCase_r2_default() {
		react_main_region_Step2_r2_ExpressoCase_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step3_r1_default() {
		react_main_region_Step3_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step3_r2_default() {
		react_main_region_Step3_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Choice_and_payment_r1_default() {
		react_main_region_Choice_and_payment_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Choice_and_payment_r1() {
		switch (historyVector[0]) {
		case main_region_Choice_and_payment_r1_No_drink_selected:
			enterSequence_main_region_Choice_and_payment_r1_No_drink_selected_default();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money:
			deepEnterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1();
			deepEnterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2();
			break;
		default:
			break;
		}
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1() {
		switch (historyVector[1]) {
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money:
			enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_default() {
		react_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2__entry_Default();
	}
	
	/* deep enterSequence with history in child r2 */
	private void deepEnterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2() {
		switch (historyVector[2]) {
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options:
			enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options_default();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait:
			enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait_default();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton:
			enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton_default();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop:
			enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop_default();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille:
			enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille_default();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready:
			enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state Step1 */
	private void exitSequence_main_region_Step1() {
		exitSequence_main_region_Step1_r1();
		exitSequence_main_region_Step1_r2();
	}
	
	/* Default exit sequence for state Water heat */
	private void exitSequence_main_region_Step1_r1_Water_heat() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state First step */
	private void exitSequence_main_region_Step1_r2_First_step() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Drink difference */
	private void exitSequence_main_region_Step1_r2_Drink_difference() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step2 */
	private void exitSequence_main_region_Step2() {
		exitSequence_main_region_Step2_r1();
		exitSequence_main_region_Step2_r2();
	}
	
	/* Default exit sequence for state Cup Placement */
	private void exitSequence_main_region_Step2_r1_Cup_Placement() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Step2_r1_Cup_Placement();
	}
	
	/* Default exit sequence for state Drink difference */
	private void exitSequence_main_region_Step2_r2_Drink_difference() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state ExpressoCase */
	private void exitSequence_main_region_Step2_r2_ExpressoCase() {
		exitSequence_main_region_Step2_r2_ExpressoCase_r1();
		exitSequence_main_region_Step2_r2_ExpressoCase_r2();
	}
	
	/* Default exit sequence for state PackSeed */
	private void exitSequence_main_region_Step2_r2_ExpressoCase_r1_PackSeed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_Step2_r2_ExpressoCase_r1__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitWater */
	private void exitSequence_main_region_Step2_r2_ExpressoCase_r2_WaitWater() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_Step2_r2_ExpressoCase_r2__final_() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Waiting for water to heat */
	private void exitSequence_main_region_Step2_r2_Waiting_for_water_to_heat() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step3 */
	private void exitSequence_main_region_Step3() {
		exitSequence_main_region_Step3_r1();
		exitSequence_main_region_Step3_r2();
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_Step3_r1__final_() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Water wait */
	private void exitSequence_main_region_Step3_r1_Water_wait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Sugar added */
	private void exitSequence_main_region_Step3_r2_Sugar_added() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for final state. */
	private void exitSequence_main_region_Step3_r2__final_() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Choice and payment */
	private void exitSequence_main_region_Choice_and_payment() {
		exitSequence_main_region_Choice_and_payment_r1();
		exitAction_main_region_Choice_and_payment();
	}
	
	/* Default exit sequence for state No_drink_selected */
	private void exitSequence_main_region_Choice_and_payment_r1_No_drink_selected() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Drink selected & not enough money */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state No options */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Lait */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Crouton */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Sirop */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Glace vanille */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Ready */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitForCupToBeTaken */
	private void exitSequence_main_region_WaitForCupToBeTaken() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state CleanMachine */
	private void exitSequence_main_region_CleanMachine() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_CleanMachine();
	}
	
	/* Default exit sequence for state Infusing */
	private void exitSequence_main_region_Infusing() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state CheckIngredients */
	private void exitSequence_main_region_CheckIngredients() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_CheckIngredients();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Step1_r1_Water_heat:
			exitSequence_main_region_Step1_r1_Water_heat();
			break;
		case main_region_Step2_r1_Cup_Placement:
			exitSequence_main_region_Step2_r1_Cup_Placement();
			break;
		case main_region_Step3_r1__final_:
			exitSequence_main_region_Step3_r1__final_();
			break;
		case main_region_Step3_r1_Water_wait:
			exitSequence_main_region_Step3_r1_Water_wait();
			break;
		case main_region_Choice_and_payment_r1_No_drink_selected:
			exitSequence_main_region_Choice_and_payment_r1_No_drink_selected();
			exitAction_main_region_Choice_and_payment();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money();
			break;
		case main_region_WaitForCupToBeTaken:
			exitSequence_main_region_WaitForCupToBeTaken();
			break;
		case main_region_CleanMachine:
			exitSequence_main_region_CleanMachine();
			break;
		case main_region_Infusing:
			exitSequence_main_region_Infusing();
			break;
		case main_region_CheckIngredients:
			exitSequence_main_region_CheckIngredients();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Step1_r2_First_step:
			exitSequence_main_region_Step1_r2_First_step();
			break;
		case main_region_Step1_r2_Drink_difference:
			exitSequence_main_region_Step1_r2_Drink_difference();
			break;
		case main_region_Step2_r2_Drink_difference:
			exitSequence_main_region_Step2_r2_Drink_difference();
			break;
		case main_region_Step2_r2_ExpressoCase_r1_PackSeed:
			exitSequence_main_region_Step2_r2_ExpressoCase_r1_PackSeed();
			break;
		case main_region_Step2_r2_ExpressoCase_r1__final_:
			exitSequence_main_region_Step2_r2_ExpressoCase_r1__final_();
			break;
		case main_region_Step2_r2_Waiting_for_water_to_heat:
			exitSequence_main_region_Step2_r2_Waiting_for_water_to_heat();
			break;
		case main_region_Step3_r2_Sugar_added:
			exitSequence_main_region_Step3_r2_Sugar_added();
			break;
		case main_region_Step3_r2__final_:
			exitSequence_main_region_Step3_r2__final_();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options();
			exitAction_main_region_Choice_and_payment();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait();
			exitAction_main_region_Choice_and_payment();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton();
			exitAction_main_region_Choice_and_payment();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop();
			exitAction_main_region_Choice_and_payment();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille();
			exitAction_main_region_Choice_and_payment();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready();
			exitAction_main_region_Choice_and_payment();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Step2_r2_ExpressoCase_r2_WaitWater:
			exitSequence_main_region_Step2_r2_ExpressoCase_r2_WaitWater();
			break;
		case main_region_Step2_r2_ExpressoCase_r2__final_:
			exitSequence_main_region_Step2_r2_ExpressoCase_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step1_r1() {
		switch (stateVector[0]) {
		case main_region_Step1_r1_Water_heat:
			exitSequence_main_region_Step1_r1_Water_heat();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step1_r2() {
		switch (stateVector[1]) {
		case main_region_Step1_r2_First_step:
			exitSequence_main_region_Step1_r2_First_step();
			break;
		case main_region_Step1_r2_Drink_difference:
			exitSequence_main_region_Step1_r2_Drink_difference();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step2_r1() {
		switch (stateVector[0]) {
		case main_region_Step2_r1_Cup_Placement:
			exitSequence_main_region_Step2_r1_Cup_Placement();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step2_r2() {
		switch (stateVector[1]) {
		case main_region_Step2_r2_Drink_difference:
			exitSequence_main_region_Step2_r2_Drink_difference();
			break;
		case main_region_Step2_r2_ExpressoCase_r1_PackSeed:
			exitSequence_main_region_Step2_r2_ExpressoCase_r1_PackSeed();
			break;
		case main_region_Step2_r2_ExpressoCase_r1__final_:
			exitSequence_main_region_Step2_r2_ExpressoCase_r1__final_();
			break;
		case main_region_Step2_r2_Waiting_for_water_to_heat:
			exitSequence_main_region_Step2_r2_Waiting_for_water_to_heat();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Step2_r2_ExpressoCase_r2_WaitWater:
			exitSequence_main_region_Step2_r2_ExpressoCase_r2_WaitWater();
			break;
		case main_region_Step2_r2_ExpressoCase_r2__final_:
			exitSequence_main_region_Step2_r2_ExpressoCase_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step2_r2_ExpressoCase_r1() {
		switch (stateVector[1]) {
		case main_region_Step2_r2_ExpressoCase_r1_PackSeed:
			exitSequence_main_region_Step2_r2_ExpressoCase_r1_PackSeed();
			break;
		case main_region_Step2_r2_ExpressoCase_r1__final_:
			exitSequence_main_region_Step2_r2_ExpressoCase_r1__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step2_r2_ExpressoCase_r2() {
		switch (stateVector[2]) {
		case main_region_Step2_r2_ExpressoCase_r2_WaitWater:
			exitSequence_main_region_Step2_r2_ExpressoCase_r2_WaitWater();
			break;
		case main_region_Step2_r2_ExpressoCase_r2__final_:
			exitSequence_main_region_Step2_r2_ExpressoCase_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step3_r1() {
		switch (stateVector[0]) {
		case main_region_Step3_r1__final_:
			exitSequence_main_region_Step3_r1__final_();
			break;
		case main_region_Step3_r1_Water_wait:
			exitSequence_main_region_Step3_r1_Water_wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step3_r2() {
		switch (stateVector[1]) {
		case main_region_Step3_r2_Sugar_added:
			exitSequence_main_region_Step3_r2_Sugar_added();
			break;
		case main_region_Step3_r2__final_:
			exitSequence_main_region_Step3_r2__final_();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Choice_and_payment_r1() {
		switch (stateVector[0]) {
		case main_region_Choice_and_payment_r1_No_drink_selected:
			exitSequence_main_region_Choice_and_payment_r1_No_drink_selected();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1() {
		switch (stateVector[0]) {
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2() {
		switch (stateVector[1]) {
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille();
			break;
		case main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready:
			exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step1_r1__entry_Default() {
		enterSequence_main_region_Step1_r1_Water_heat_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step1_r2__entry_Default() {
		enterSequence_main_region_Step1_r2_Drink_difference_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step2_r1__entry_Default() {
		enterSequence_main_region_Step2_r1_Cup_Placement_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step2_r2__entry_Default() {
		enterSequence_main_region_Step2_r2_Drink_difference_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step2_r2_ExpressoCase_r1__entry_Default() {
		enterSequence_main_region_Step2_r2_ExpressoCase_r1_PackSeed_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step2_r2_ExpressoCase_r2__entry_Default() {
		enterSequence_main_region_Step2_r2_ExpressoCase_r2_WaitWater_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step3_r1__entry_Default() {
		enterSequence_main_region_Step3_r1_Water_wait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step3_r2__entry_Default() {
		enterSequence_main_region_Step3_r2_Sugar_added_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_CheckIngredients_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Choice_and_payment_r1__entry_Default() {
		enterSequence_main_region_Choice_and_payment_r1_No_drink_selected_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2__entry_Default() {
		enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options_default();
	}
	
	/* Default react sequence for deep history entry history */
	private void react_main_region_Choice_and_payment_r1_history() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NullState$) {
			deepEnterSequence_main_region_Choice_and_payment_r1();
		} else {
			enterSequence_main_region_Choice_and_payment_r1_No_drink_selected_default();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Step1_r1__sync0() {
		exitSequence_main_region_Step1();
		enterSequence_main_region_Step2_default();
		react();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync0() {
		enterSequence_main_region_Step3_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Step1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r1_Water_heat_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Step1_r2_First_step)) && sCInterface.endFirstStep)) {
				react_main_region_Step1_r1__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r2_First_step_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.endFirstStep && isStateActive(State.main_region_Step1_r1_Water_heat)) && true)) {
				react_main_region_Step1_r1__sync0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r2_Drink_difference_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.podPlacement) {
				exitSequence_main_region_Step1_r2_Drink_difference();
				sCInterface.raisePodPlacing();
				
				enterSequence_main_region_Step1_r2_First_step_default();
				main_region_Step1_react(false);
			} else {
				if (sCInterface.seedGrind) {
					exitSequence_main_region_Step1_r2_Drink_difference();
					sCInterface.raiseSeedGrinding();
					
					enterSequence_main_region_Step1_r2_First_step_default();
					main_region_Step1_react(false);
				} else {
					if (sCInterface.bagPlacement) {
						exitSequence_main_region_Step1_r2_Drink_difference();
						sCInterface.raiseBagPlacing();
						
						enterSequence_main_region_Step1_r2_First_step_default();
						main_region_Step1_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r1_Cup_Placement_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((((timeEvents[0] || sCInterface.cupIsPlaced) && isStateActive(State.main_region_Step2_r2_Waiting_for_water_to_heat)) && sCInterface.waterHeated)) {
				exitSequence_main_region_Step2();
				react_main_region__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_Drink_difference_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.waitingForWater) {
				exitSequence_main_region_Step2_r2_Drink_difference();
				sCInterface.raiseWaitForWaterHeated();
				
				enterSequence_main_region_Step2_r2_Waiting_for_water_to_heat_default();
				main_region_Step2_react(false);
			} else {
				if (sCInterface.step2Expresso) {
					exitSequence_main_region_Step2_r2_Drink_difference();
					enterSequence_main_region_Step2_r2_ExpressoCase_default();
					main_region_Step2_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_ExpressoCase_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Step2_r2_ExpressoCase();
			enterSequence_main_region_Step2_r2_Waiting_for_water_to_heat_default();
			main_region_Step2_react(false);
		}
		if (did_transition==false) {
			did_transition = main_region_Step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_ExpressoCase_r1_PackSeed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.endPackSeed) {
				exitSequence_main_region_Step2_r2_ExpressoCase_r1_PackSeed();
				enterSequence_main_region_Step2_r2_ExpressoCase_r1__final__default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_ExpressoCase_r1__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_ExpressoCase_r2_WaitWater_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Step2_r2_ExpressoCase_r2_WaitWater();
			enterSequence_main_region_Step2_r2_ExpressoCase_r2__final__default();
		}
		if (did_transition==false) {
			did_transition = main_region_Step2_r2_ExpressoCase_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_ExpressoCase_r2__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Step2_r2_ExpressoCase_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_Waiting_for_water_to_heat_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.waterHeated && isStateActive(State.main_region_Step2_r1_Cup_Placement)) && (timeEvents[0] || sCInterface.cupIsPlaced))) {
				exitSequence_main_region_Step2();
				react_main_region__sync0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.giveCup) {
				exitSequence_main_region_Step3();
				enterSequence_main_region_WaitForCupToBeTaken_default();
				react();
			} else {
				if (sCInterface.letInfuse) {
					exitSequence_main_region_Step3();
					enterSequence_main_region_Infusing_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r1__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r1_Water_wait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Step3_r1_Water_wait();
			enterSequence_main_region_Step3_r1__final__default();
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r2_Sugar_added_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Step3_r2_Sugar_added();
			enterSequence_main_region_Step3_r2__final__default();
		}
		if (did_transition==false) {
			did_transition = main_region_Step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r2__final__react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.insertCoin10 || (sCInterface.insertCoin25 || (sCInterface.insertCoin50 || (sCInterface.optionButton || sCInterface.nFC))))) {
				exitSequence_main_region_Choice_and_payment();
				entryAction_main_region_Choice_and_payment();
				react_main_region_Choice_and_payment_r1_history();
			} else {
				if ((timeEvents[1] || sCInterface.cancelButton)) {
					exitSequence_main_region_Choice_and_payment();
					sCInterface.raiseCancel();
					
					entryAction_main_region_Choice_and_payment();
					enterSequence_main_region_Choice_and_payment_r1_No_drink_selected_default();
					react();
				} else {
					if (sCInterface.enoughMoneyInserted) {
						exitSequence_main_region_Choice_and_payment();
						sCInterface.raiseDoTransaction();
						
						enterSequence_main_region_Step1_default();
						react();
					} else {
						if (sCInterface.teaButton) {
							exitSequence_main_region_Choice_and_payment();
							sCInterface.raiseTeaChosed();
							
							entryAction_main_region_Choice_and_payment();
							enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money_default();
							enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_default();
							historyVector[0] = stateVector[0];
							
							react();
						} else {
							if (sCInterface.expressoButton) {
								exitSequence_main_region_Choice_and_payment();
								sCInterface.raiseExpressoChosed();
								
								entryAction_main_region_Choice_and_payment();
								enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money_default();
								enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_default();
								historyVector[0] = stateVector[0];
								
								react();
							} else {
								if (sCInterface.coffeeButton) {
									exitSequence_main_region_Choice_and_payment();
									sCInterface.raiseCoffeeChosed();
									
									entryAction_main_region_Choice_and_payment();
									enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money_default();
									enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_default();
									historyVector[0] = stateVector[0];
									
									react();
								} else {
									did_transition = false;
								}
							}
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_No_drink_selected_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r1_Drink_selected___not_enough_money_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.milk) {
				exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options();
				sCInterface.raiseMilkChosed();
				
				enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait_default();
				main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
			} else {
				if (sCInterface.crust) {
					exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options();
					sCInterface.raiseCrustChosed();
					
					enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton_default();
					main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
				} else {
					if (sCInterface.sirup) {
						exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options();
						sCInterface.raiseSirupChosed();
						
						enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop_default();
						main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
					} else {
						if (sCInterface.vanilla) {
							exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_No_options();
							sCInterface.raiseVanillaChosed();
							
							enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille_default();
							main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.validateOptions) {
				exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Lait();
				enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_default();
				main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.validateOptions) {
				exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Crouton();
				enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_default();
				main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.validateOptions) {
				exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Sirop();
				enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_default();
				main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.validateOptions) {
				exitSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Glace_vanille();
				enterSequence_main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_default();
				main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Choice_and_payment_r1_Drink___options___not_enough_money_r2_Ready_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Choice_and_payment_r1_Drink___options___not_enough_money_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_WaitForCupToBeTaken_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cupIsTaken) {
				exitSequence_main_region_WaitForCupToBeTaken();
				enterSequence_main_region_CleanMachine_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_CleanMachine_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_CleanMachine();
				enterSequence_main_region_CheckIngredients_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Infusing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.giveCup) {
				exitSequence_main_region_Infusing();
				enterSequence_main_region_WaitForCupToBeTaken_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_CheckIngredients_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_CheckIngredients();
				sCInterface.raiseDisableMissingIngredients();
				
				enterSequence_main_region_Choice_and_payment_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
